package com.leader.common.exploit;

import com.leader.common.exception.CommonErrCode;
import com.leader.common.exception.CommonException;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.StringUtils;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
/***
 * 时间类工具
 */
@Configuration
public class DateTool{

    public static String toCurrent(String format){
        SimpleDateFormat current = new SimpleDateFormat(format);
        return current.format(new Date());
    }

    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static Calendar startDate = Calendar.getInstance();
    private static Calendar endDate = Calendar.getInstance();
    private static DateFormat df = DateFormat.getDateInstance();
    private static Date earlydate = new Date();
    private static Date latedate = new Date();

    /**
     * 计算两个时间相差多少个年
     *
     * @param start
     * @param end
     * @return
     * @throws ParseException
     */
    public static int yearsBetween(String start, String end) throws ParseException {
        startDate.setTime(sdf.parse(start));
        endDate.setTime(sdf.parse(end));
        return (endDate.get(Calendar.YEAR) - startDate.get(Calendar.YEAR));
    }

    /**
     * 计算两个时间相差多少个月
     *
     * @param start <String>
     * @param end   <String>
     * @return int
     * @throws ParseException
     */
    public static int monthsBetween(String start, String end) throws ParseException {
        startDate.setTime(sdf.parse(start));
        endDate.setTime(sdf.parse(end));
        int result = yearsBetween(start, end) * 12 + endDate.get(Calendar.MONTH) - startDate.get(Calendar.MONTH);
        return result == 0 ? 1 : Math.abs(result);

    }

    /**
     * 计算两个时间相差多少个天
     *
     * @param start
     * @param end
     * @return
     * @throws ParseException
     */
    public static int daysBetween(String start, String end) throws ParseException {
        // 得到两个日期相差多少天
        return hoursBetween(start, end) / 24;
    }

    /**
     * 计算两个时间相差多少小时
     *
     * @param start
     * @param end
     * @return
     * @throws ParseException
     */
    public static int hoursBetween(String start, String end) throws ParseException {
        // 得到两个日期相差多少小时
        return minutesBetween(start, end) / 60;
    }

    /**
     * 计算两个时间相差多少分
     *
     * @param start
     * @param end
     * @return
     * @throws ParseException
     */
    public static int minutesBetween(String start, String end) throws ParseException {
        // 得到两个日期相差多少分
        return secondesBetween(start, end) / 60;
    }

    /**
     * 计算两个时间相差多少秒
     *
     * @param start
     * @param end
     * @return
     * @throws ParseException
     */
    public static int secondesBetween(String start, String end) throws ParseException {
        earlydate = df.parse(start);
        latedate = df.parse(end);
        startDate.setTime(earlydate);
        endDate.setTime(latedate);
        // 设置时间为0时
        startDate.set(Calendar.HOUR_OF_DAY, 0);
        startDate.set(Calendar.MINUTE, 0);
        startDate.set(Calendar.SECOND, 0);
        endDate.set(Calendar.HOUR_OF_DAY, 0);
        endDate.set(Calendar.MINUTE, 0);
        endDate.set(Calendar.SECOND, 0);
        // 得到两个日期相差多少秒
        return ((int) (endDate.getTime().getTime() / 1000) - (int) (startDate.getTime().getTime() / 1000));
    }

    /**
     * 计算当天已过秒数
     *
     * @param arr
     * @return
     */
    public static Integer timeDifference(String arr) {
        String hourString = arr.substring(arr.indexOf(" ") + 1);
        Integer hourInt = Integer.parseInt(hourString.substring(0, hourString.indexOf(":"))); // 小时
        String minuteString = arr.substring(arr.indexOf(":") + 1);
        Integer minuteInt = Integer.parseInt(minuteString.substring(0, minuteString.lastIndexOf(":"))); //  分钟
        Integer clockInt = Integer.parseInt(arr.substring(arr.lastIndexOf(":") + 1)); //秒数
        return (60 * 60 * hourInt) + (60 * minuteInt) + clockInt;
    }

    /**
     * 计算是否符合天数过期条件
     *
     * @param decideTime //判定时间
     * @param condition  //天数条件(单位/天)
     * @return
     * @throws ParseException
     */
    public static Boolean judgeWhetherPast(String decideTime, Integer condition) throws ParseException {
        if (StringUtils.isEmpty(decideTime) || condition == null) {
            throw new CommonException(CommonErrCode.ARGS_INVALID, "请出入真确参数");
        }
        SimpleDateFormat current = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String presentTime = current.format(new Date());
        Integer clock = daysBetween(decideTime, presentTime); // 相差天数
        if (clock >= condition) {
            Integer crr = timeDifference(decideTime); // 秒差(天)
            Integer err = timeDifference(presentTime);  // 秒差(天)
            if ((crr - err) <= 0) return true;
        }
        return false;
    }

}


