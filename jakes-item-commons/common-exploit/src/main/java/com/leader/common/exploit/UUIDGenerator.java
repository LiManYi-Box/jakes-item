package com.leader.common.exploit;

import org.springframework.context.annotation.Configuration;

import java.net.InetAddress;

@Configuration
public class UUIDGenerator {

    /**
     * 产生一个32位的UUID
     *
     * @return
     */

    public static String generate() {
        return new StringBuilder(32).append(format(getIP())).append(format(getJVM())).append(format(getHiTime())).append(format(getLoTime())).append(format(getCount())).toString();

    }


    /**
     * 高并发生成订单唯一号
     *
     * @param goosId 商品ID
     * @return
     */
    public static String goosSole(String goosId) {
        String date;
        date = DateTool.toCurrent("yyyyMMddHHmmss");
        String uid = getCount() + "";
        StringBuffer drr = new StringBuffer();
        for (int i = 0; i < 4 - uid.length(); i++) {
            drr.append("0");
        }
        return new StringBuffer().append(date).append(goosId).append(drr).append(uid).toString();
    }


    private static final int IP;

    static {
        int ipadd;
        try {
            ipadd = toInt(InetAddress.getLocalHost().getAddress());
        } catch (Exception e) {
            ipadd = 0;
        }
        IP = ipadd;
    }

    private static short counter = (short) 0;

    private static final int JVM = (int) (System.currentTimeMillis() >>> 8);

    private final static String format(int intval) {
        String formatted = Integer.toHexString(intval);
        StringBuilder buf = new StringBuilder("00000000");
        buf.replace(8 - formatted.length(), 8, formatted);
        return buf.toString();
    }

    private final static String format(short shortval) {
        String formatted = Integer.toHexString(shortval);
        StringBuilder buf = new StringBuilder("0000");
        buf.replace(4 - formatted.length(), 4, formatted);
        return buf.toString();
    }

    private final static int getJVM() {
        return JVM;
    }

    private final static short getCount() {
        synchronized (UUIDGenerator.class) {
            if (counter < 0)
                counter = 0;
            return counter++;
        }
    }

    /**
     * Unique in a local network
     */
    private final static int getIP() {
        return IP;
    }

    /**
     * Unique down to millisecond
     */
    private final static short getHiTime() {
        return (short) (System.currentTimeMillis() >>> 32);
    }

    private final static int getLoTime() {
        return (int) System.currentTimeMillis();
    }

    private final static int toInt(byte[] bytes) {
        int result = 0;
        for (int i = 0; i < 4; i++) {
            result = (result << 8) - Byte.MIN_VALUE + (int) bytes[i];
        }
        return result;
    }


}

